StateMachine
{
    Number curHealth;
    Vec2 curPosition;
    Bool canShoot = true;
    Number fireCooldown = .5;

    Number maxHealth;
    OnEvent( Spawn )
    {
        curHealth = maxHealth;

        FireEvent( AddNewDamageTypeMultiplier( damageType = "normal", multiplier = 1 ) );
    
        FireEvent( RegisterKeyEvent( key = "W", event = "MoveUp" ) );
        FireEvent( RegisterKeyEvent( key = "A", event = "MoveLeft" ) );
        FireEvent( RegisterKeyEvent( key = "S", event = "MoveDown" ) );
        FireEvent( RegisterKeyEvent( key = "D", event = "MoveRight" ) );
        FireEvent( RegisterKeyEvent( key = "Up", event = "ShootFireballUp" ) );
        FireEvent( RegisterKeyEvent( key = "Left", event = "ShootFireballLeft" ) );
        FireEvent( RegisterKeyEvent( key = "Down", event = "ShootFireballDown" ) );
        FireEvent( RegisterKeyEvent( key = "Right", event = "ShootFireballRight" ) );
    }

    Vec2 newPos;
	OnEvent( UpdateEntityPosition )
	{
		curPosition = newPos;
	}

    Number newHealth;
	OnEvent( HealthUpdated )
	{
        if( newHealth < curHealth )
        {
            FireEvent( ActivateInvincibility() );
            FireEvent( ChangeSpriteAnimation( newAnim = "Damaged" ) );
            FireEvent( StartNewTimer( durationSeconds = 2, onCompletedEvent = "InvincibilityExpired" ) );
        }

		curHealth = newHealth;
    }

    OnEvent( InvincibilityExpired )
    {
        FireEvent( DeactivateInvincibility() );
        FireEvent( ChangeSpriteAnimation( newAnim = "Walk" ) );
    }

    // Input Events
    // TODO? Add parameter passing into key events to remove the need to make separate events for each direction
    OnEvent( MoveUp )
    {
        Vec2 dir = ( 0, 1 );
        FireEvent( MoveInDirection( direction = dir ) );
    }

    OnEvent( MoveDown )
    {
        Vec2 dir = ( 0, -1 );
        FireEvent( MoveInDirection( direction = dir ) );
    }

    OnEvent( MoveLeft )
    {
        Vec2 dir = ( -1, 0 );
        FireEvent( MoveInDirection( direction = dir ) );
    }

    OnEvent( MoveRight )
    {
        Vec2 dir = ( 1, 0 );
        FireEvent( MoveInDirection( direction = dir ) );
    }

    // Attacks
    OnEvent( ShotCooldownExpired )
    {
        canShoot = true;
    }

    Vec2 fireballOffset;
    Number shotOrientation;
    OnEvent( ShootFireball )
    {
        if( !canShoot )
        {
            return;
        }

        FireEvent( SpawnEntity( type = "PlayerFireball", position = curPosition + fireballOffset, orientation = shotOrientation ) );
        FireEvent( StartNewTimer( durationSeconds = fireCooldown, onCompletedEvent = "ShotCooldownExpired" ) );

        canShoot = false;
    }

    OnEvent( ShootFireballUp )
    {
        Vec2 posOffset = ( 0, .6 );
        FireEvent( ShootFireball( fireballOffset = posOffset, shotOrientation = 90 ) );
    }

    OnEvent( ShootFireballLeft )
    {
        Vec2 posOffset = ( -.6, 0 );
        FireEvent( ShootFireball( fireballOffset = posOffset, shotOrientation = 180 ) );
    }

    OnEvent( ShootFireballDown )
    {
        Vec2 posOffset = ( 0, -.6 );
        FireEvent( ShootFireball( fireballOffset = posOffset, shotOrientation = 270 ) );
    }

    OnEvent( ShootFireballRight )
    {
        Vec2 posOffset = ( .6, 0 );
        FireEvent( ShootFireball( fireballOffset = posOffset, shotOrientation = 0 ) );
    }

    OnEvent( ShootTripleFireballUp )
    {
        if( !canShoot )
        {
            return;
        }

        Vec2 posOffset = ( 0, .6 );
        FireEvent( SpawnEntity( type = "PlayerFireball", position = curPosition + posOffset, orientation = 90 ) );
        Vec2 posOffset = ( -.5, .6 );
        FireEvent( SpawnEntity( type = "PlayerFireball", position = curPosition + posOffset, orientation = 135 ) );
        Vec2 posOffset = ( .5, .6 );
        FireEvent( SpawnEntity( type = "PlayerFireball", position = curPosition + posOffset, orientation = 45 ) );
        FireEvent( StartNewTimer( durationSeconds = fireCooldown, onCompletedEvent = "ShotCooldownExpired" ) );

        canShoot = false;
    }
}
