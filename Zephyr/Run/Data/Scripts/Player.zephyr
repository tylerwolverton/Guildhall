Number curHealth = -1;
Vec2 curPosition;
Bool canShoot = true;
Number fireCooldown = .5;

Vec2 testVec
Entity blob

Function Spawned( Number maxHealth )
{
    if( curHealth == -1 )
    {
        curHealth = maxHealth;
    }

    AddNewDamageTypeMultiplier( damageType: "normal", multiplier: 1 )

    RegisterKeyEvent( key: "P", event: "SummonBlob" )

    RegisterKeyEvent( key: "W", event: "MoveUp" )
    RegisterKeyEvent( key: "A", event: "MoveLeft" )
    RegisterKeyEvent( key: "S", event: "MoveDown" )
    RegisterKeyEvent( key: "D", event: "MoveRight" )

    RegisterKeyEvent( key: "Up", event: "ShootFireballUp" )
    RegisterKeyEvent( key: "Left", event: "ShootFireballLeft" )
    RegisterKeyEvent( key: "Down", event: "ShootFireballDown" )
    RegisterKeyEvent( key: "Right", event: "ShootFireballRight" )
}

Function SummonBlob()
{
    //blob.target.MoveUp()
   // Number testVal = 7
   // blob.SummonBlob( newPos: curPosition, testVal: testVal )

   // PrintDebugText(text: testVal )
}

Function ItemAcquired( String itemName )
{
    if( itemName == "TripleFireballPickup" )
    {
        UnRegisterKeyEvent( key: "Up", event: "ShootFireballUp" )
        UnRegisterKeyEvent( key: "Left", event: "ShootFireballLeft" )
        UnRegisterKeyEvent( key: "Down", event: "ShootFireballDown" )
        UnRegisterKeyEvent( key: "Right", event: "ShootFireballRight" )
        
        RegisterKeyEvent( key: "Up", event: "ShootTripleFireballUp" )
        RegisterKeyEvent( key: "Left", event: "ShootTripleFireballLeft" )
        RegisterKeyEvent( key: "Down", event: "ShootTripleFireballDown" )
        RegisterKeyEvent( key: "Right", event: "ShootTripleFireballRight" )
    }
}

Function PositionUpdated( Vec2 newPos )
{
    curPosition = newPos;
}

Function HealthUpdated( Number newHealth )
{
    if( newHealth < curHealth )
    {
        ActivateInvincibility()
        ChangeSpriteAnimation( newAnim: "Damaged" )
        StartNewTimer( durationSeconds: 2, onCompletedEvent: "InvincibilityExpired" )
    }

    curHealth = newHealth;
}

Function InvincibilityExpired()
{
    DeactivateInvincibility()
    ChangeSpriteAnimation( newAnim: "Walk" )
}

// Input Events
// TODO? Add parameter passing into key events to remove the need to make separate events for each direction
Function MoveUp()
{
    MoveInDirection( direction: Vec2( 0, 1 ) )
}

Function MoveDown()
{
    MoveInDirection( direction: Vec2( 0, -1 ) )
}

Function MoveLeft()
{
    MoveInDirection( direction: Vec2( -1, 0 ) )
}

Function MoveRight()
{
    MoveInDirection( direction: Vec2( 1, 0 ) )
}

// Attacks
Function ShotCooldownExpired()
{
    canShoot = true;
}

Function ShootFireball( Vec2 fireballOffset, Number shotOrientation )
{
    if( !canShoot )
    {
        return;
    }

    SpawnEntity( type: "PlayerFireball", position: curPosition + fireballOffset, orientation: shotOrientation )
    StartNewTimer( durationSeconds: fireCooldown, onCompletedEvent: "ShotCooldownExpired" )

    canShoot = false;
}

Function ShootFireballUp()
{
    ShootFireball( fireballOffset: Vec2( 0, .6 ), shotOrientation: 90 )
}

Function ShootFireballLeft()
{
    ShootFireball( fireballOffset: Vec2( -.6, 0 ), shotOrientation: 180 )
}

Function ShootFireballDown()
{
    ShootFireball( fireballOffset: Vec2( 0, -.6 ), shotOrientation: 270 )
}

Function ShootFireballRight()
{
    ShootFireball( fireballOffset: Vec2( .6, 0 ), shotOrientation: 0 )
}

// TripleFireball

Function ShootTripleFireball( Vec2 fireballOffset1,
                              Number shotOrientation1,
                              Vec2 fireballOffset2,
                              Number shotOrientation2,
                              Vec2 fireballOffset3,
                              Number shotOrientation3 )
{
    if( !canShoot )
    {
        return;
    }

    SpawnEntity( type: "PlayerFireball", position: curPosition + fireballOffset1, orientation: shotOrientation1 )
    SpawnEntity( type: "PlayerFireball", position: curPosition + fireballOffset2, orientation: shotOrientation1 + 45 )
    SpawnEntity( type: "PlayerFireball", position: curPosition + fireballOffset3, orientation: shotOrientation1 - 45 )

    StartNewTimer( durationSeconds: fireCooldown, onCompletedEvent: "ShotCooldownExpired" )

    canShoot = false;
}

Function ShootTripleFireballUp()
{
    ShootTripleFireball( fireballOffset1: Vec2( 0, .6 ), 
                         fireballOffset2: Vec2( -.5, .6 ),
                         fireballOffset3: Vec2( .5, .6 ),
                         shotOrientation1: 90 ) 
}

Function ShootTripleFireballLeft()
{
    ShootTripleFireball( fireballOffset1: Vec2( -.6, 0 ), 
                         fireballOffset2: Vec2( -.6, .1 ),
                         fireballOffset3: Vec2( -.6, 1.1 ),
                         shotOrientation1: 180 )
}

Function ShootTripleFireballDown()
{
    ShootTripleFireball( fireballOffset1: Vec2( 0, -.6 ), 
                         fireballOffset2: Vec2( .5, -.6 ),
                         fireballOffset3: Vec2( -.5, -.6 ),
                         shotOrientation1: 270 )
}

Function ShootTripleFireballRight()
{        
    ShootTripleFireball( fireballOffset1: Vec2( .6, 0 ), 
                         fireballOffset2: Vec2( .6, 1.1 ),
                         fireballOffset3: Vec2( .6, .1 ),
                         shotOrientation1: 0 )
}


State Default
{
    Bool isFirst = true
    Number testVal = 12

    OnUpdate()
    {
        if( isFirst )
        {
            isFirst = false
            // testVal = 7
            blob.SummonBlob( newPos: curPosition, testVal: testVal )
            PrintToConsole( text: "isFirst is true" )
        }

        PrintDebugText( text: "TestVal: " + testVal )
    }
}

