StateMachine
{
    Number curHealth;
    Vec2 curPosition;
    Bool canShoot = true;
    Number fireCooldown = .5;

    //Number[] plaqueIds;

    Number maxHealth;
    OnEvent( Spawned )
    {
        curHealth = maxHealth;

        FireEvent( AddNewDamageTypeMultiplier( damageType = "normal", multiplier = 1 ) );
    
        FireEvent( RegisterKeyEvent( key = "W", event = "MoveUp" ) );
        FireEvent( RegisterKeyEvent( key = "A", event = "MoveLeft" ) );
        FireEvent( RegisterKeyEvent( key = "S", event = "MoveDown" ) );
        FireEvent( RegisterKeyEvent( key = "D", event = "MoveRight" ) );

        FireEvent( RegisterKeyEvent( key = "Up", event = "FirePlaque" ) );

        FireEvent( SpawnNewEntityInInventory( type = "Plaque", position = curPosition + Vec2( .1, 0 ) ) );
        FireEvent( SpawnNewEntityInInventory( type = "Plaque", position = curPosition + Vec2( -.1, 0 ) ) );
        FireEvent( SpawnNewEntityInInventory( type = "Plaque", position = curPosition + Vec2( 0, .1 ) ) );
        FireEvent( SpawnNewEntityInInventory( type = "Plaque", position = curPosition + Vec2( 0, -.1 ) ) );
        FireEvent( SpawnNewEntityInInventory( type = "Plaque", position = curPosition + Vec2( .1, .1 ) ) );
    }

    String itemName;
	OnEvent( ItemAcquired )
	{
		FireEvent( PrintDebugText( text = "Added Item", duration = 5 ) );
	}

    Vec2 newPos;
	OnEvent( PositionUpdated )
	{
		curPosition = newPos;
	}

    // Number newHealth;
	// OnEvent( HealthUpdated )
	// {
    //     if( newHealth < curHealth )
    //     {
    //         FireEvent( ActivateInvincibility() );
    //         //FireEvent( ChangeSpriteAnimation( newAnim = "Damaged" ) );
    //         //FireEvent( StartNewTimer( durationSeconds = 2, onCompletedEvent = "InvincibilityExpired" ) );
    //     }

	// 	curHealth = newHealth;
    // }

    // OnEvent( InvincibilityExpired )
    // {
    //     FireEvent( DeactivateInvincibility() );
    //     FireEvent( ChangeSpriteAnimation( newAnim = "Walk" ) );
    // }

    // Input Events
    // TODO? Add parameter passing into key events to remove the need to make separate events for each direction
    OnEvent( MoveUp )
    {
        FireEvent( MoveInDirection( direction = Vec2( 0, 1 ) ) );
    }

    OnEvent( MoveDown )
    {
        FireEvent( MoveInDirection( direction = Vec2( 0, -1 ) ) );
    }

    OnEvent( MoveLeft )
    {
        FireEvent( MoveInDirection( direction = Vec2( -1, 0 ) ) );
    }

    OnEvent( MoveRight )
    {
        FireEvent( MoveInDirection( direction = Vec2( 1, 0 ) ) );
    }

    // Attacks
    OnEvent( ShotCooldownExpired )
    {
        canShoot = true;
    }

    OnEvent( FirePlaque )
    {
        if( !canShoot )
        {
            return;
        }

        FireEvent( ThrowItemFromInventory( itemType = "Plaque" ) );
        FireEvent( StartNewTimer( durationSeconds = fireCooldown, onCompletedEvent = "ShotCooldownExpired" ) );

        canShoot = false;
    }

    OnEvent( ShootFireballUp )
    {
        FireEvent( ShootFireball( fireballOffset = Vec2( 0, .6 ), shotOrientation = 90 ) );
    }

    OnEvent( ShootFireballLeft )
    {
        FireEvent( ShootFireball( fireballOffset = Vec2( -.6, 0 ), shotOrientation = 180 ) );
    }

    OnEvent( ShootFireballDown )
    {
        FireEvent( ShootFireball( fireballOffset = Vec2( 0, -.6 ), shotOrientation = 270 ) );
    }

    OnEvent( ShootFireballRight )
    {
        FireEvent( ShootFireball( fireballOffset = Vec2( .6, 0 ), shotOrientation = 0 ) );
    }
}
